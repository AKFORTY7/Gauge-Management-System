[{"/workspaces/Gauge-Management-System/client/src/index.js":"1","/workspaces/Gauge-Management-System/client/src/App.js":"2","/workspaces/Gauge-Management-System/client/src/reportWebVitals.js":"3","/workspaces/Gauge-Management-System/client/src/pages/Home.js":"4","/workspaces/Gauge-Management-System/client/src/pages/Login.js":"5","/workspaces/Gauge-Management-System/client/src/pages/SingleGauge.js":"6","/workspaces/Gauge-Management-System/client/src/pages/Profile.js":"7","/workspaces/Gauge-Management-System/client/src/pages/Admin.js":"8","/workspaces/Gauge-Management-System/client/src/components/Header/index.js":"9","/workspaces/Gauge-Management-System/client/src/components/Footer/index.js":"10","/workspaces/Gauge-Management-System/client/src/utils/mutations.js":"11","/workspaces/Gauge-Management-System/client/src/utils/queries.js":"12","/workspaces/Gauge-Management-System/client/src/utils/auth.js":"13","/workspaces/Gauge-Management-System/client/src/components/AdminForms/categoryForm.js":"14","/workspaces/Gauge-Management-System/client/src/components/AdminForms/userForm.js":"15","/workspaces/Gauge-Management-System/client/src/components/AdminForms/gaugeForm.js":"16","/workspaces/Gauge-Management-System/client/src/components/GaugeList/index.js":"17","/workspaces/Gauge-Management-System/client/src/components/GaugeForm/index.js":"18"},{"size":500,"mtime":1736157735481,"results":"19","hashOfConfig":"20"},{"size":2404,"mtime":1736157735477,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1736157735481,"results":"22","hashOfConfig":"20"},{"size":868,"mtime":1736157735481,"results":"23","hashOfConfig":"20"},{"size":2501,"mtime":1736157735481,"results":"24","hashOfConfig":"20"},{"size":1781,"mtime":1736157735481,"results":"25","hashOfConfig":"20"},{"size":1720,"mtime":1736157735481,"results":"26","hashOfConfig":"20"},{"size":3351,"mtime":1736157735481,"results":"27","hashOfConfig":"20"},{"size":3531,"mtime":1736157735481,"results":"28","hashOfConfig":"20"},{"size":851,"mtime":1736157735477,"results":"29","hashOfConfig":"20"},{"size":1936,"mtime":1736157735481,"results":"30","hashOfConfig":"20"},{"size":1464,"mtime":1736157735481,"results":"31","hashOfConfig":"20"},{"size":1325,"mtime":1736157735481,"results":"32","hashOfConfig":"20"},{"size":2469,"mtime":1736157735477,"results":"33","hashOfConfig":"20"},{"size":4317,"mtime":1736157735477,"results":"34","hashOfConfig":"20"},{"size":3871,"mtime":1736157735477,"results":"35","hashOfConfig":"20"},{"size":1232,"mtime":1736157735481,"results":"36","hashOfConfig":"20"},{"size":2856,"mtime":1736157735477,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qvv5y2",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},"/workspaces/Gauge-Management-System/client/src/index.js",[],"/workspaces/Gauge-Management-System/client/src/App.js",[],"/workspaces/Gauge-Management-System/client/src/reportWebVitals.js",[],"/workspaces/Gauge-Management-System/client/src/pages/Home.js",[],"/workspaces/Gauge-Management-System/client/src/pages/Login.js",[],"/workspaces/Gauge-Management-System/client/src/pages/SingleGauge.js",[],"/workspaces/Gauge-Management-System/client/src/pages/Profile.js",[],"/workspaces/Gauge-Management-System/client/src/pages/Admin.js",[],"/workspaces/Gauge-Management-System/client/src/components/Header/index.js",[],"/workspaces/Gauge-Management-System/client/src/components/Footer/index.js",[],"/workspaces/Gauge-Management-System/client/src/utils/mutations.js",[],"/workspaces/Gauge-Management-System/client/src/utils/queries.js",[],"/workspaces/Gauge-Management-System/client/src/utils/auth.js",[],"/workspaces/Gauge-Management-System/client/src/components/AdminForms/categoryForm.js",["78"],"import React, { useState } from 'react';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_CATEGORY } from '../../utils/mutations';\n\n\nconst CategoryForm = ({categories}) => {\n\n  const [formState, setFormState] = useState({\n    category_name: '',\n   });\n  const [addCategory, { error, data }] = useMutation(ADD_CATEGORY);\n\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    \n\n    try {\n      const { data } = await addCategory({\n        variables: { ...formState },\n      });\n\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  if (!categories.length) {\n    return <h3>No Categories Yet</h3>;\n  };\n\n  \n\n  return (\n    <div className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">ADD CATEGORY</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                {window.location.assign('/admin')}\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Category name\"\n                  name=\"categoryName\"\n                  type=\"text\"\n                  value={formState.name}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className='card'>\n        {categories && categories.map((category) => (\n              <div key={category._id} className=\"card mb-3\">\n                <h4 className=\"card-header bg-primary text-light p-2 m-0\">\n                  {category.category_name}\n                \n                </h4>\n\n                <button >Edit</button>\n                <button >Delete</button>\n              </div>\n            ))\n            }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryForm;","/workspaces/Gauge-Management-System/client/src/components/AdminForms/userForm.js",["79","80","81"],"import React, { useEffect, useState } from 'react';\n//import { Link } from 'react-router-dom';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER, DELETE_USER } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst UserForm = ({ users }) => {\n  const [formState, setFormState] = useState({\n    username: '',\n    email: '',\n    password: '',\n    isAdmin: ''\n  });\n\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n  const [deleteUser, { delete_user_error, delete_user_data }] = useMutation(DELETE_USER);\n\n  //useEffect{};\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n\n    try {\n      const { data } = await addUser({\n        variables: { ...formState },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const delUser = async (index, user_id) => {\n    \n    console.log(\"delUser function is executed\", index, {user_id});\n    //return\n\n    try {\n      const { delete_user_data } = await deleteUser({\n        variables:  {id: user_id} ,\n      });\n      //console.log('The formstate values are', delete_user_data);\n      //Auth.login(delete_user_data.addUser.token);\n\n      //UserForm();\n    } catch (e) {\n      console.error(e);\n    }\n    return\n  };\n\n\n  const [checked, setChecked] = useState(false);\n\n  const tickChange = () => {\n    setChecked(!checked);\n  };\n\n  const Checkbox = ({ label, value, onChange }) => {\n\n    formState.isAdmin = value;\n\n\n    return (\n      <label>\n        <input type=\"checkbox\" checked={value} onChange={onChange} />\n        {label}\n      </label>\n    );\n  };\n\n\n\n\n\n\n  return (\n    <div className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">Sign Up</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                User {formState.username} had been added....\n\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Username\"\n                  name=\"username\"\n                  type=\"text\"\n                  value={formState.name}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Your email\"\n                  name=\"email\"\n                  type=\"email\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"******\"\n                  name=\"password\"\n                  type=\"password\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <Checkbox\n                  label=\"Admin\" name='isAdmin' value={checked} onChange={tickChange} />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className='card'>\n          {users && users.map((user, index) => (\n            <div key={user._id} className=\"card mb-3\">\n              <h4 className=\"card-header bg-primary text-light p-2 m-0\">\n                {user.username}\n\n              </h4>\n\n              <button >Edit</button>\n              <button value={user._id} className='btn' onClick={() => delUser(index, user._id)} >Delete</button>\n              {delete_user_error && (\n                <div className=\"my-3 p-3 bg-danger text-white\">\n                  {delete_user_error.message}\n                </div>\n              )}\n            </div>\n\n          ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserForm;\n","/workspaces/Gauge-Management-System/client/src/components/AdminForms/gaugeForm.js",["82"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useMutation } from '@apollo/client';\nimport { ADD_GAUGE} from '../../utils/mutations';\n//import { addTypenameToDocument } from '@apollo/client/utilities';\n\n//import Auth from '../../utils/auth';\n\nconst GaugeForm = ({ gauges }) => {\n\n \n\n  const [formState, setFormState] = useState({\n    gaugeName: '',\n    category: '',\n    currentInventory: '',\n  });\n\n\n  const [addGauge, { error, data }] = useMutation(ADD_GAUGE);\n\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    console.log(formState);\n\n    try {\n      const { data } = await addGauge({\n        variables: { ...formState },\n      });\n\n      //Auth.login(data.addUser.token);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  if (!gauges.length) {\n    return <h3>No Gauges Yet</h3>;\n  };\n\n\n\n  return (\n    <div className=\"flex-row justify-center mb-4\">\n      <div className=\"col-12 col-lg-10\">\n        <div className=\"card\">\n          <h4 className=\"card-header bg-dark text-light p-2\">ADD NEW GAUGE</h4>\n          <div className=\"card-body\">\n            {data ? (\n              <p>\n                Success! You may now head{' '}\n                <Link to=\"/\">back to the homepage.</Link>\n              </p>\n            ) : (\n              <form onSubmit={handleFormSubmit}>\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Gauge name\"\n                  name=\"gaugeName\"\n                  type=\"text\"\n                  value={formState.name}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Category\"\n                  name=\"category\"\n                  type=\"ID\"\n                  value={formState.email}\n                  onChange={handleChange}\n                />\n                <input\n                  className=\"form-input\"\n                  placeholder=\"Qty\"\n                  name=\"currentInventory\"\n                  type=\"int\"\n                  value={formState.password}\n                  onChange={handleChange}\n                />\n                <button\n                  className=\"btn btn-block btn-primary\"\n                  style={{ cursor: 'pointer' }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </form>\n            )}\n\n            {error && (\n              <div className=\"my-3 p-3 bg-danger text-white\">\n                {error.message}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className='card'>\n          <div>\n            {gauges && gauges.map((gauge) => (\n              <div key={gauge._id} className=\"card mb-3\">\n                <h4 className=\"card-header bg-primary text-light p-2 m-0\">\n                  {gauge.gauge_name}\n                  <div>\n                    {gauge.category.category_name} <br />\n                  </div>\n                </h4>\n                <div className=\"card-body bg-light p-2\">\n                  <span style={{ fontSize: '1rem' }}>\n                  </span>\n                </div>\n                {/* Create a link to this thought's page to view its comments using `<Link>` component */}\n                <Link\n                  className=\"btn btn-primary btn-block btn-squared\"\n                  to={`/gauges/${gauge._id}`}\n                >\n                  See details.\n                </Link>\n                <button >Edit</button>\n                <button >Delete</button>\n              </div>\n            ))\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GaugeForm;","/workspaces/Gauge-Management-System/client/src/components/GaugeList/index.js",[],"/workspaces/Gauge-Management-System/client/src/components/GaugeForm/index.js",["83"],"import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_GAUGE } from '../../utils/mutations';\nimport { QUERY_GAUGES } from '../../utils/queries';\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    thoughtText: '',\n    thoughtAuthor: '',\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addGauge, { error }] = useMutation(ADD_GAUGE, {\n    update(cache, { data: { addGauge } }) {\n      try {\n        const { gauges } = cache.readQuery({ query: QUERY_GAUGES });\n\n        cache.writeQuery({\n          query: QUERY_GAUGES,\n          data: { gauges: [addGauge, ...gauges] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addGauge({\n        variables: { ...formState },\n      });\n\n      setFormState({\n        thoughtText: '',\n        thoughtAuthor: '',\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'thoughtText' && value.length <= 280) {\n      setFormState({ ...formState, [name]: value });\n      setCharacterCount(value.length);\n    } else if (name !== 'thoughtText') {\n      setFormState({ ...formState, [name]: value });\n    }\n  };\n\n  return (\n    <div>\n      <h3>Search:</h3>\n\n      <p\n        className={`m-0 ${characterCount === 280 || error ? 'text-danger' : ''\n          }`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-center\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"col-12\">\n          <textarea\n            name=\"thoughtText\"\n            placeholder=\"Here's a new thought...\"\n            value={formState.thoughtText}\n            className=\"form-input w-100\"\n            style={{ lineHeight: '1.5' }}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n        <div className=\"col-12 col-lg-9\">\n          <input\n            name=\"thoughtAuthor\"\n            placeholder=\"Add your name to get credit for the thought...\"\n            value={formState.thoughtAuthor}\n            className=\"form-input w-100\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"col-12 col-lg-3\">\n          <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n            Add Thought\n          </button>\n        </div>\n        {error && (\n          <div className=\"col-12 my-3 bg-danger text-white p-3\">\n            Something went wrong...\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n",{"ruleId":"84","severity":1,"message":"85","line":29,"column":15,"nodeType":"86","messageId":"87","endLine":29,"endColumn":19},{"ruleId":"84","severity":1,"message":"88","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"89","line":18,"column":43,"nodeType":"86","messageId":"87","endLine":18,"endColumn":59},{"ruleId":"84","severity":1,"message":"89","line":52,"column":15,"nodeType":"86","messageId":"87","endLine":52,"endColumn":31},{"ruleId":"84","severity":1,"message":"85","line":38,"column":15,"nodeType":"86","messageId":"87","endLine":38,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":33,"column":15,"nodeType":"86","messageId":"87","endLine":33,"endColumn":19},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'delete_user_data' is assigned a value but never used."]